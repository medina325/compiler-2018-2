/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mjcompiler.view.main;

import java.awt.Event;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import mjcompiler.controller.Parser;
import mjcompiler.controller.Scanner;
import mjcompiler.helpers.util.CompilerException;
import mjcompiler.helpers.util.BoxUtilities;
import mjcompiler.helpers.util.EnumToken;
import mjcompiler.helpers.util.TextLineNumber;
import mjcompiler.model.Token;
import mjcompiler.view.about.About;
import mjcompiler.view.help.Help;
import mjcompiler.view.results.Results;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author carvalho
 */
public class MainScreenJF extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    Results results = null;
    protected UndoManager undoManager;
    
    public MainScreenJF() {
        initComponents();
        
        this.setTitle("MiniJava Compiler 2018");
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        undoManager = new UndoManager();
        subMenuEditUndo.setEnabled(false);
        subMenuEditRedo.setEnabled(false);
    
        // Setup methods
        this.setupMenuEdit();
        this.setupEditor();
    
        txtInput.getDocument().addUndoableEditListener(
        new UndoableEditListener() {
          public void undoableEditHappened(UndoableEditEvent e) {
            undoManager.addEdit(e.getEdit());
            updateButtons();
          }
        });
        
    }
    
    public void setupEditor(){        
        TextLineNumber tln = new TextLineNumber(txtInput);
        scrollInput1.setRowHeaderView( tln );
        txtInput.setDocument(BoxUtilities.getDocumentKeyReserves());
        
    }
    
    public void setupMenuEdit(){
        Action cutAction = new DefaultEditorKit.CutAction();
        cutAction.putValue(Action.NAME, "Cut");
        subMenuEditCut.addActionListener(cutAction);

        Action copyAction = new DefaultEditorKit.CopyAction();
        copyAction.putValue(Action.NAME, "Copy");
        subMenuEditCopy.addActionListener(copyAction);

        Action pasteAction = new DefaultEditorKit.PasteAction();
        pasteAction.putValue(Action.NAME, "Paste");
        subMenuEditPaste.addActionListener(pasteAction);

        }
  public void updateButtons() {
    subMenuEditUndo.setText(undoManager.getUndoPresentationName());
    subMenuEditRedo.setText(undoManager.getRedoPresentationName());
    subMenuEditUndo.setEnabled(undoManager.canUndo());
    subMenuEditRedo.setEnabled(undoManager.canRedo());
  }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelMain = new javax.swing.JPanel();
        txtProjectName1 = new javax.swing.JLabel();
        scrollInput1 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextPane();
        menuMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        subMenuFileNew = new javax.swing.JMenuItem();
        subMenuFileOpen = new javax.swing.JMenuItem();
        subMenuFileSave = new javax.swing.JMenuItem();
        subMenuExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        subMenuEditUndo = new javax.swing.JMenuItem();
        subMenuEditRedo = new javax.swing.JMenuItem();
        subMenuEditCut = new javax.swing.JMenuItem();
        subMenuEditCopy = new javax.swing.JMenuItem();
        subMenuEditPaste = new javax.swing.JMenuItem();
        menuEdit1 = new javax.swing.JMenu();
        subMenuRunLexical = new javax.swing.JMenuItem();
        subMenuRunSyntactic = new javax.swing.JMenuItem();
        menuOptions = new javax.swing.JMenu();
        subMenuOptionsHelp = new javax.swing.JMenuItem();
        subMenuOptionsAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtProjectName1.setText("Code Editor");

        scrollInput1.setViewportView(txtInput);

        javax.swing.GroupLayout painelMainLayout = new javax.swing.GroupLayout(painelMain);
        painelMain.setLayout(painelMainLayout);
        painelMainLayout.setHorizontalGroup(
            painelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollInput1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelMainLayout.createSequentialGroup()
                        .addComponent(txtProjectName1)
                        .addGap(0, 545, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painelMainLayout.setVerticalGroup(
            painelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtProjectName1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollInput1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
        );

        menuFile.setMnemonic('F');
        menuFile.setText("File");

        subMenuFileNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        subMenuFileNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/page_add.png"))); // NOI18N
        subMenuFileNew.setText("New File ...");
        subMenuFileNew.setToolTipText("Clique aqui para criar um novo arquivo ...");
        subMenuFileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuFileNewActionPerformed(evt);
            }
        });
        menuFile.add(subMenuFileNew);

        subMenuFileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        subMenuFileOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/folder_page.png"))); // NOI18N
        subMenuFileOpen.setMnemonic('A');
        subMenuFileOpen.setText("Open File ...");
        subMenuFileOpen.setToolTipText("Clique aqui para abrir um arquivo...");
        subMenuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuFileOpenActionPerformed(evt);
            }
        });
        menuFile.add(subMenuFileOpen);

        subMenuFileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        subMenuFileSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/page_save.png"))); // NOI18N
        subMenuFileSave.setText("Save");
        subMenuFileSave.setToolTipText("Clique aqui para salvar o arquivo...");
        subMenuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuFileSaveActionPerformed(evt);
            }
        });
        menuFile.add(subMenuFileSave);

        subMenuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        subMenuExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/exclamation.png"))); // NOI18N
        subMenuExit.setText("exit");
        subMenuExit.setToolTipText("Clique aqui para sair ...");
        subMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuExitActionPerformed(evt);
            }
        });
        menuFile.add(subMenuExit);

        menuMain.add(menuFile);

        menuEdit.setText("Edit");

        subMenuEditUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        subMenuEditUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/page_go.png"))); // NOI18N
        subMenuEditUndo.setText("Undo");
        subMenuEditUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuEditUndoActionPerformed(evt);
            }
        });
        menuEdit.add(subMenuEditUndo);

        subMenuEditRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        subMenuEditRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/page_go.png"))); // NOI18N
        subMenuEditRedo.setText("Redo");
        subMenuEditRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuEditRedoActionPerformed(evt);
            }
        });
        menuEdit.add(subMenuEditRedo);

        subMenuEditCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        subMenuEditCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/cut.png"))); // NOI18N
        subMenuEditCut.setText("Cut");
        subMenuEditCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuEditCutActionPerformed(evt);
            }
        });
        menuEdit.add(subMenuEditCut);

        subMenuEditCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        subMenuEditCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/page_white_copy.png"))); // NOI18N
        subMenuEditCopy.setText("Copy");
        subMenuEditCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuEditCopyActionPerformed(evt);
            }
        });
        menuEdit.add(subMenuEditCopy);

        subMenuEditPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        subMenuEditPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/paste_plain.png"))); // NOI18N
        subMenuEditPaste.setText("Paste");
        subMenuEditPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuEditPasteActionPerformed(evt);
            }
        });
        menuEdit.add(subMenuEditPaste);

        menuMain.add(menuEdit);

        menuEdit1.setText("Run Analysis");

        subMenuRunLexical.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        subMenuRunLexical.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/script_add.png"))); // NOI18N
        subMenuRunLexical.setText("Lexical");
        subMenuRunLexical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuRunLexicalActionPerformed(evt);
            }
        });
        menuEdit1.add(subMenuRunLexical);

        subMenuRunSyntactic.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        subMenuRunSyntactic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/script_gear.png"))); // NOI18N
        subMenuRunSyntactic.setText("Syntactic & Semantic");
        subMenuRunSyntactic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuRunSyntacticActionPerformed(evt);
            }
        });
        menuEdit1.add(subMenuRunSyntactic);

        menuMain.add(menuEdit1);

        menuOptions.setText("Options");

        subMenuOptionsHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        subMenuOptionsHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/book.png"))); // NOI18N
        subMenuOptionsHelp.setText("Help");
        subMenuOptionsHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuOptionsHelpActionPerformed(evt);
            }
        });
        menuOptions.add(subMenuOptionsHelp);

        subMenuOptionsAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        subMenuOptionsAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mjcompiler/helpers/icons/help.png"))); // NOI18N
        subMenuOptionsAbout.setMnemonic('E');
        subMenuOptionsAbout.setText("About");
        subMenuOptionsAbout.setToolTipText("Quit Team, Quit!");
        subMenuOptionsAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuOptionsAboutActionPerformed(evt);
            }
        });
        menuOptions.add(subMenuOptionsAbout);

        menuMain.add(menuOptions);

        setJMenuBar(menuMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void subMenuFileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuFileNewActionPerformed
        // TODO add your handling code here:
         if (!txtInput.getText().equals("")) {
            int r = JOptionPane.showOptionDialog(this,
                    "O código não foi salvo, deseja salvar?",
                    "Aviso", JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (r == JOptionPane.YES_OPTION) {
                this.subMenuFileSaveActionPerformed(evt);
            } else {
                r = JOptionPane.showOptionDialog(this,
                        "Criar um novo código em branco?\n",
                        "Aviso", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, null, null);
                if (r == JOptionPane.YES_OPTION) {
                    txtInput.setText("");
                }
            }

        }
    }//GEN-LAST:event_subMenuFileNewActionPerformed

    private void subMenuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuFileOpenActionPerformed
        // TODO add your handling code here:
        if (!txtInput.getText().equals("")) {
            int r = JOptionPane.showOptionDialog(this,
                "O código não foi salvo, deseja salvar?",
                "Aviso", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (r == JOptionPane.YES_OPTION) {
                this.subMenuFileSaveActionPerformed(evt);
            } else {
                r = JOptionPane.showOptionDialog(this,
                    "Ao abrir um novo arquivo, você perderá as informações do código atual, deseja continuar?",
                    "Aviso", JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, null, null);
                if (r == JOptionPane.YES_OPTION) {
                    JFileChooser chooser = new JFileChooser();
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("MJ Files, TXT Files, Java Files", "mj", "txt","java");
                    chooser.setFileFilter(filter);
                    int returnVal = chooser.showOpenDialog(getParent());
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        FileReader reader = null;
                        try {
                            reader = new FileReader(new File(chooser.getSelectedFile().getAbsolutePath()));
                        } catch (FileNotFoundException e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                        BufferedReader leitor = new BufferedReader(reader);
                        txtInput.setText("");
                        String linha;
                        try {
                            while ((linha = leitor.readLine()) != null) {
                                txtInput.setText(txtInput.getText() + linha + '\n');
                            }
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

                        }
                    }
                }
            }

        } else {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("MJ Files, TXT Files, Java Files", "mj", "txt","java");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(getParent());
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                FileReader reader = null;
                try {
                    reader = new FileReader(new File(chooser.getSelectedFile().getAbsolutePath()));
                } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

                }
                BufferedReader leitor = new BufferedReader(reader);
                txtInput.setText("");
                String linha;
                try {
                    while ((linha = leitor.readLine()) != null) {
                        txtInput.setText(txtInput.getText() + linha + '\n');
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_subMenuFileOpenActionPerformed

    private void subMenuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuFileSaveActionPerformed
        // TODO add your handling code here:
        File file;
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(getParent());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
            Writer writer;
            try {
                writer = new BufferedWriter(new OutputStreamWriter(
                        new FileOutputStream(file), "utf-8"));
                writer.write(txtInput.getText());
                writer.close();
            } catch (Exception error) {
                JOptionPane.showMessageDialog(null, error.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
            JOptionPane.showMessageDialog(null,
                    "Sucesso ao salvar o código!");

        }
    }//GEN-LAST:event_subMenuFileSaveActionPerformed

    private void subMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_subMenuExitActionPerformed

    private void subMenuEditCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuEditCutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subMenuEditCutActionPerformed

    private void subMenuEditCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuEditCopyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subMenuEditCopyActionPerformed

    private void subMenuEditPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuEditPasteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subMenuEditPasteActionPerformed

    private void subMenuRunSyntacticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuRunSyntacticActionPerformed
        // TODO add your handling code here:
        System.out.println(txtInput.getText());
        try{
            Parser parser = new Parser(txtInput.getText());
            parser.execute();
            results = new Results(this,"Compilação encerrada com sucesso!");
            results.setVisible(true);
        }
        catch(CompilerException e)
        {
            results = new Results(this,e.toString());
            results.setVisible(true);
        }
        
       
    }//GEN-LAST:event_subMenuRunSyntacticActionPerformed

    private void subMenuOptionsHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuOptionsHelpActionPerformed
        // TODO add your handling code here:
        Help help = null;
        try {
            help = new Help(this);
        } catch (IOException ex) {
            Logger.getLogger(MainScreenJF.class.getName()).log(Level.SEVERE, null, ex);
        }
        help.setVisible(true);
    }//GEN-LAST:event_subMenuOptionsHelpActionPerformed

    private void subMenuOptionsAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuOptionsAboutActionPerformed
        About about = new About(this);
        about.setVisible(true);
    }//GEN-LAST:event_subMenuOptionsAboutActionPerformed

    private void subMenuRunLexicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuRunLexicalActionPerformed
        // TODO add your handling code here:
        Token tok;
        Parser parser = new Parser(txtInput.getText());
        Scanner scanner = parser.getScan();
        StringBuilder leximes = new StringBuilder();
        do {
            tok = scanner.nextToken();
            leximes.append(String.format("<%s,%s>\n", tok.name, tok.attribute));
        } while (tok.name != EnumToken.EOF);
        
        results = new Results(this,leximes.toString());
        results.setVisible(true);
        
    }//GEN-LAST:event_subMenuRunLexicalActionPerformed

    private void subMenuEditUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuEditUndoActionPerformed
        // TODO add your handling code here:
        try {
          undoManager.undo();
        } catch (CannotRedoException cre) {
          cre.printStackTrace();
        }
        updateButtons();
        
    }//GEN-LAST:event_subMenuEditUndoActionPerformed

    private void subMenuEditRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuEditRedoActionPerformed
        // TODO add your handling code here:
        try {
          undoManager.redo();
        } catch (CannotRedoException cre) {
          cre.printStackTrace();
        }
        updateButtons();
       
    }//GEN-LAST:event_subMenuEditRedoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreenJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreenJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreenJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreenJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreenJF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuEdit1;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuBar menuMain;
    private javax.swing.JMenu menuOptions;
    private javax.swing.JPanel painelMain;
    private javax.swing.JScrollPane scrollInput1;
    private javax.swing.JMenuItem subMenuEditCopy;
    private javax.swing.JMenuItem subMenuEditCut;
    private javax.swing.JMenuItem subMenuEditPaste;
    private javax.swing.JMenuItem subMenuEditRedo;
    private javax.swing.JMenuItem subMenuEditUndo;
    private javax.swing.JMenuItem subMenuExit;
    private javax.swing.JMenuItem subMenuFileNew;
    private javax.swing.JMenuItem subMenuFileOpen;
    private javax.swing.JMenuItem subMenuFileSave;
    private javax.swing.JMenuItem subMenuOptionsAbout;
    private javax.swing.JMenuItem subMenuOptionsHelp;
    private javax.swing.JMenuItem subMenuRunLexical;
    private javax.swing.JMenuItem subMenuRunSyntactic;
    private javax.swing.JTextPane txtInput;
    private javax.swing.JLabel txtProjectName1;
    // End of variables declaration//GEN-END:variables
}
